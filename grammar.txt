S -> {DEC} {COM}+
DEC -> (int|boolean|byte|string) id[<-[-]val] {,id[<-[-]val]}; |
       final id <- [-]val;

COM -> id <-EXP; |
       while'('EXP')' (COM | begin {COM} endwhile) |
	   if '('EXP')'(COM [else COM] | begin {COM} endif [else begin {COM} endelse]) |
	   ; |
	   readln'('id')'; |
	   (write|writeln)'('EXP {,EXP}')';

EXP -> EXS [(<|>|<=|>=|!=|=) EXS]

EXS -> [+|-] T {(+|-|'||')T}

T   -> F {(*|/|'&&')F}

F   -> '('EXP')' | id | val | !F



S 	-> {D} {C}+
D 	-> (INT|BOOLEAN|BYTE|STRING) ID [RECEIVE [MINUS] CONST] {COMMA ID [RECEIVE [MINUS] CONST]} SEMICOLON |
		    FINAL ID RECEIVE [MINUS] CONST SEMICOLON
C		-> ID RECEIVE E SEMICOLON |
       WHILE OPPAR E CLPAR (BEGIN {C} ENDWHILE | C) |
		   IF OPPAR E CLPAR (BEGIN {C} ENDIF [ELSE (BEGIN {C} ENDELSE | C)] | C [ELSE (BEGIN {C} ENDELSE | C)]) |
		   SEMICOLON |
		   READLN OPPAR ID CLPAR SEMICOLON |
		   (WRITE | WRITELN) OPPAR E {COMMA E} CLPAR SEMICOLON
E 	-> X [(LESSTHAN | MORETHAN | LESSEQUAL | MOREEQUAL | DIFFERENT | EQUALS) X]
X 	-> [PLUS | MINUS] T {(PLUS | MINUS | OR) T}
T   -> F {(TIMES | DIVIDE | AND) F}
F   -> OPPAR E CLPAR | ID | CONST | NOT F
